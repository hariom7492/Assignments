/**
 You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
 - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
 - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

 Each todo has a title and a description. The title is a string and the description is a string.
 Each todo should also get an unique autogenerated id every time it is created
 The expected API endpoints are defined below,
 1.GET /todos - Retrieve all todo items
 Description: Returns a list of all todo items.
 Response: 200 OK with an array of todo items in JSON format.
 Example: GET http://localhost:3000/todos

 2.GET /todos/:id - Retrieve a specific todo item by ID
 Description: Returns a specific todo item identified by its ID.
 Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
 Example: GET http://localhost:3000/todos/123

 3. POST /todos - Create a new todo item
 Description: Creates a new todo item.
 Request Body: JSON object representing the todo item.
 Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
 Example: POST http://localhost:3000/todos
 Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }

 4. PUT /todos/:id - Update an existing todo item by ID
 Description: Updates an existing todo item identified by its ID.
 Request Body: JSON object representing the updated todo item.
 Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
 Example: PUT http://localhost:3000/todos/123
 Request Body: { "title": "Buy groceries", "completed": true }

 5. DELETE /todos/:id - Delete a todo item by ID
 Description: Deletes a todo item identified by its ID.
 Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
 Example: DELETE http://localhost:3000/todos/123

 - For any other route not defined in the server return 404

 Testing the server - run `npm run test-todoServer` command in terminal
 */
 const express = require('express');
 const bodyParser = require('body-parser');
 const app = express();
 const fs = require('fs/promises');
 
 app.use(bodyParser.json());
 let todos = [];
 async function getData(){
     try{
         const data = await fs.readFile('./todos.json','utf-8');
         todos = JSON.parse(data);
         console.log(todos);
     }catch{
         todos = [];
     }
     
 }
 // getData();
 
 async function saveData(){
     await fs.writeFile('./todos.json',JSON.stringify(todos,null,2));
 }
 app.use(async(res,req,next)=>{
     await getData();
     next();
 })
 
 app.get('/todos',async(req,res)=>{
     // await getData();
     res.json(todos);
 })
 app.post('/todos',(req,res)=>{
     const newData = {};
     newData.id = todos.length+1;
     newData.title = req.body.title;
     newData.description = req.body.description;
     todos.push(newData);
     saveData();
     res.json({id:newData.id});
 })
 app.get('/todos/:id',(req,res)=>{
 
     const id = parseInt(req.params.id);
     const todo = todos.find((todo)=> todo.id===id);
     if(todo){
         res.status(202).json(todo);
     }
     else{
         res.status(404).json("Error 404");
     }
 })
 app.put('/todos/:id',(req,res)=>{
     const getId = parseInt(req.params.id);
     const index = todos.findIndex((todo)=> todo.id===getId);
     if(index!==-1){
         todos[index]={
             id:getId,
             title:req.body.title,
             description:req.body.description
         }
         saveData();
         res.status(202).json("updated");
     }
     else{
         res.status(404).json("error 404");
     }
 })
 app.delete('/todos/:id',(req,res)=>{
     const getId = parseInt(req.params.id);
     const index = todos.findIndex((todo)=> todo.id===getId);
     if(index!==-1){
         todos.splice(index,1);
         saveData();
         res.status(202).json("remove completed");
     }
     else{
         res.status(404).json("error 404");
     }
 })
 app.listen('3000',()=>{
     console.log("running port 3000")
 })
 

module.exports = app;
